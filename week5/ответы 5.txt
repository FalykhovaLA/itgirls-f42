1. Почему в большинстве ситуаций стоит использовать flexbox-позиционирование?
2. Самостоятельно изучите способ позиционирования через `display: table`  и ответьте на вопрос, для каких ситуаций оно лучше всего подходит? 
3. Какими способами можно сделать горизонтальное выравнивание по центру? Минимум 3 варианта, можно больше
4. Какие есть оси во флекс-верстке и как задается их направление?
5. Разберитесь, как работает свойство `margin: auto` во флекс-верстке, приведите пример использования
6. В чем преимущества `box-sizing`?
7. Чем отличается `flex-grow` от `flex-shrink`?
8. Как можно добиться следующего позиционирования элементов:
9.Какой в итоге будет размер у элемента (можно округлить)? 
10. Самостоятельно разберитесь, зачем нужно свойство `order`?
11. Каким кодом можно сделать такую таблицу?
12. Изучите материалы и найдите, для каких ситуаций подходит `position: fixed`? 
13. Каким способом лучше всего верстать большие блоки текста?
14. Как рассчитывается размер flex-контейнера?

1.Flexbox предназначен для создания гибких макетов. 
С помощью этой технологии можно очень просто и гибко расставить элементы в контейнере,
распределить доступное пространство между ними, и выровнять их тем или иным способом даже если они не имеют конкретных размеров.
2.С его помощью можно получить истинное выравнивание по вертикали элементов с динамической высотой
3.justify-content: center; 
align-items: center;
align-content: center;
4.Выравнивание элементов вдоль основной оси осуществляется с помощью CSS свойства justify-content:
justify-content: flex-start; 
/* flex-start (flex-элементы выравниваются относительно начала оси) – по умолчанию
   flex-end (flex-элементы выравниваются относительно конца оси)
   center (по центру flex-контейнера)
   space-between (равномерно, т.е. с одинаковым расстоянием между flex-элементами)
   space-around (равномерно, но с добавлением половины пространства перед первым flex-элементом и после последнего) */
Выравнивание flex-элементов во flex-контейнере по направлению поперечной оси осуществляется с помощью CSS-свойства align-items
align-items: stretch;
/* stretch (растягиваются по всей длине линии вдоль направления поперечной оси) – по умолчанию
   flex-start (распологаются относительно начала поперечной оси)
   flex-end (относительно конца поперечной оси)
   baseline (относительно базовой линии)
   center (по центру) */
5.Атрибут с таким значением будет занимать все доступное пространство в своём измерении. 
Так работает центрирование блока со свойством margin:auto.
6.Свойство box-sizing позволяет  чтобы свойства width и height задавали размеры не содержимого, а размеры блока.
7.flex-shrink : определяет, как flex-элемент будет уменьшаться относительно других flex-элементов во flex-контейнере
 flex-grow : определяет, как flex-элемент будет увеличиваться относительно других flex-элементов во flex-контейнере
8.justify-content: space-between;
9.width 148.523
  height 19.796
10.Свойство order определяет порядок вывода флексов внутри флекс-контейнера. Элементы располагаются согласно значениям свойства order от меньшего к большему. 
При равных значениях order элементы выводятся в том порядке, в каком они появляются в исходном коде.
11.
12.Применяется такой тип позиционирования для создания меню, вкладок, заголовков, в общем, любых элементов, 
которые должны быть закреплены на веб-странице и всегда видны посетителю.
13.Позиционирование через float
14.Размеры флекс-элементов рассчитываются как в обычной блочной модели: рамки +
отступы + размеры содержания